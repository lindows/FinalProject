package Test;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Shape;
import java.awt.TexturePaint;
import java.io.IOException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

public class PaintGUI extends javax.swing.JFrame {

    private Color shapeColor;
    private BasicStroke shapeStroke = new BasicStroke(4);
    private int pastX = 0, pastY = 0;
    private int currentX = 0, currentY = 0;
    private Image forground, background;
    private Graphics forgroundBase, backgroundBase;
    private ShapeABS shapeObject;
    private boolean shapeFilled;
    private Vector<ShapeABS> shapeContainer = new Vector<ShapeABS>();
    private float shapeAlpha;
    private GradientPaint shapeGradient;
    private TexturePaint shapeTexture;
    private Color colorPart1, colorPart2;
    private boolean gradientSelected = false;

    /**
     * Creates new form PaintGUI
     */
    public PaintGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dashORfilled = new javax.swing.ButtonGroup();
        textureORgradient = new javax.swing.ButtonGroup();
        PictureControl = new javax.swing.JToolBar();
        button_OpenPicture = new Test.Button_OpenPicture();
        button_SavePicture = new Test.Button_SavePicture();
        button_PrintPicture = new Test.Button_PrintPicture();
        button_DrawFree = new Test.Button_DrawFree();
        button_ClearScreen = new Test.Button_ClearScreen();
        button_DrawLine = new Test.Button_DrawLine();
        button_DrawOval = new Test.Button_DrawOval();
        button_DrawRect = new Test.Button_DrawRect();
        ShapeControl = new javax.swing.JPanel();
        shapePreview = new javax.swing.JPanel();
        redSlider = new javax.swing.JSlider();
        greenSlider = new javax.swing.JSlider();
        blueSlider = new javax.swing.JSlider();
        strokeSlider = new javax.swing.JSlider();
        jToolBar1 = new javax.swing.JToolBar();
        IS_shapeDashed = new javax.swing.JCheckBox();
        IS_shapeFilled = new javax.swing.JCheckBox();
        IS_shapeGradient = new javax.swing.JCheckBox();
        IS_shapeTexture = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        alphaSlider = new javax.swing.JSlider();
        IS_shapeText = new javax.swing.JCheckBox();
        customText = new javax.swing.JTextField();
        shapeField = new javax.swing.JPanel();
        MenuContainer = new javax.swing.JMenuBar();
        FileTopMenu = new javax.swing.JMenu();

        dashORfilled.add(IS_shapeDashed);
        dashORfilled.add(IS_shapeFilled);
        dashORfilled.add(IS_shapeText);

        textureORgradient.add(IS_shapeGradient);
        textureORgradient.add(IS_shapeTexture);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PictureControl.setRollover(true);

        button_OpenPicture.setFocusable(false);
        button_OpenPicture.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_OpenPicture.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        button_OpenPicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_OpenPictureActionPerformed(evt);
            }
        });
        PictureControl.add(button_OpenPicture);
        button_OpenPicture.getAccessibleContext().setAccessibleName("Open");

        button_SavePicture.setFocusable(false);
        button_SavePicture.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_SavePicture.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        button_SavePicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_SavePictureActionPerformed(evt);
            }
        });
        PictureControl.add(button_SavePicture);

        button_PrintPicture.setFocusable(false);
        button_PrintPicture.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_PrintPicture.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        button_PrintPicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_PrintPictureActionPerformed(evt);
            }
        });
        PictureControl.add(button_PrintPicture);

        button_DrawFree.setFocusable(false);
        button_DrawFree.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_DrawFree.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        button_DrawFree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_DrawFreeActionPerformed(evt);
            }
        });
        PictureControl.add(button_DrawFree);

        button_ClearScreen.setFocusable(false);
        button_ClearScreen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_ClearScreen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        button_ClearScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_ClearScreenActionPerformed(evt);
            }
        });
        PictureControl.add(button_ClearScreen);

        button_DrawLine.setFocusable(false);
        button_DrawLine.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_DrawLine.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        button_DrawLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_DrawLineActionPerformed(evt);
            }
        });
        PictureControl.add(button_DrawLine);

        button_DrawOval.setFocusable(false);
        button_DrawOval.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_DrawOval.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        button_DrawOval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_DrawOvalActionPerformed(evt);
            }
        });
        PictureControl.add(button_DrawOval);

        button_DrawRect.setFocusable(false);
        button_DrawRect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        button_DrawRect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        button_DrawRect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_DrawRectActionPerformed(evt);
            }
        });
        PictureControl.add(button_DrawRect);

        getContentPane().add(PictureControl, java.awt.BorderLayout.PAGE_START);

        ShapeControl.setMinimumSize(new java.awt.Dimension(850, 45));
        ShapeControl.setLayout(new java.awt.GridBagLayout());

        shapePreview.setBackground(new java.awt.Color(255, 255, 255));
        shapePreview.setPreferredSize(new java.awt.Dimension(50, 50));

        javax.swing.GroupLayout shapePreviewLayout = new javax.swing.GroupLayout(shapePreview);
        shapePreview.setLayout(shapePreviewLayout);
        shapePreviewLayout.setHorizontalGroup(
            shapePreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        shapePreviewLayout.setVerticalGroup(
            shapePreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        ShapeControl.add(shapePreview, gridBagConstraints);

        redSlider.setMajorTickSpacing(50);
        redSlider.setMaximum(255);
        redSlider.setMinorTickSpacing(5);
        redSlider.setPaintLabels(true);
        redSlider.setPaintTicks(true);
        redSlider.setSnapToTicks(true);
        redSlider.setToolTipText("Red");
        redSlider.setValue(0);
        redSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                redSliderStateChanged(evt);
            }
        });
        ShapeControl.add(redSlider, new java.awt.GridBagConstraints());

        greenSlider.setMajorTickSpacing(50);
        greenSlider.setMaximum(255);
        greenSlider.setMinorTickSpacing(5);
        greenSlider.setPaintLabels(true);
        greenSlider.setPaintTicks(true);
        greenSlider.setSnapToTicks(true);
        greenSlider.setToolTipText("Green");
        greenSlider.setValue(0);
        greenSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                greenSliderStateChanged(evt);
            }
        });
        ShapeControl.add(greenSlider, new java.awt.GridBagConstraints());

        blueSlider.setMajorTickSpacing(50);
        blueSlider.setMaximum(255);
        blueSlider.setMinorTickSpacing(5);
        blueSlider.setPaintLabels(true);
        blueSlider.setPaintTicks(true);
        blueSlider.setSnapToTicks(true);
        blueSlider.setToolTipText("Blue");
        blueSlider.setValue(0);
        blueSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                blueSliderStateChanged(evt);
            }
        });
        ShapeControl.add(blueSlider, new java.awt.GridBagConstraints());

        strokeSlider.setMajorTickSpacing(25);
        strokeSlider.setMinorTickSpacing(5);
        strokeSlider.setPaintLabels(true);
        strokeSlider.setPaintTicks(true);
        strokeSlider.setSnapToTicks(true);
        strokeSlider.setToolTipText("Stroke");
        strokeSlider.setValue(4);
        strokeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                strokeSliderStateChanged(evt);
            }
        });
        ShapeControl.add(strokeSlider, new java.awt.GridBagConstraints());

        getContentPane().add(ShapeControl, java.awt.BorderLayout.PAGE_END);

        jToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.setRollover(true);
        jToolBar1.setMinimumSize(new java.awt.Dimension(64, 39));
        jToolBar1.setPreferredSize(new java.awt.Dimension(64, 25));

        IS_shapeDashed.setText("Dashed");
        IS_shapeDashed.setFocusable(false);
        IS_shapeDashed.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IS_shapeDashed.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jToolBar1.add(IS_shapeDashed);

        IS_shapeFilled.setText("Filled");
        IS_shapeFilled.setFocusable(false);
        IS_shapeFilled.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        IS_shapeFilled.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IS_shapeFilled.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jToolBar1.add(IS_shapeFilled);

        IS_shapeGradient.setText("Gradient");
        IS_shapeGradient.setFocusable(false);
        IS_shapeGradient.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IS_shapeGradient.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jToolBar1.add(IS_shapeGradient);

        IS_shapeTexture.setText("Texture");
        IS_shapeTexture.setFocusable(false);
        IS_shapeTexture.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IS_shapeTexture.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jToolBar1.add(IS_shapeTexture);

        jLabel1.setText("Alpha");
        jToolBar1.add(jLabel1);

        alphaSlider.setMajorTickSpacing(25);
        alphaSlider.setMinorTickSpacing(5);
        alphaSlider.setSnapToTicks(true);
        alphaSlider.setToolTipText("Alpha");
        alphaSlider.setValue(0);
        alphaSlider.setName("Alpha"); // NOI18N
        jToolBar1.add(alphaSlider);
        alphaSlider.getAccessibleContext().setAccessibleName("Alpha");

        IS_shapeText.setText("Text");
        IS_shapeText.setFocusable(false);
        IS_shapeText.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IS_shapeText.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jToolBar1.add(IS_shapeText);

        customText.setText("Custom Text Here");
        customText.setMinimumSize(new java.awt.Dimension(30, 39));
        customText.setName(""); // NOI18N
        customText.setPreferredSize(new java.awt.Dimension(100, 30));
        jToolBar1.add(customText);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.EAST);

        shapeField.setPreferredSize(new java.awt.Dimension(32767, 32767));
        shapeField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                shapeFieldMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                shapeFieldMouseReleased(evt);
            }
        });
        shapeField.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                shapeFieldMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout shapeFieldLayout = new javax.swing.GroupLayout(shapeField);
        shapeField.setLayout(shapeFieldLayout);
        shapeFieldLayout.setHorizontalGroup(
            shapeFieldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 786, Short.MAX_VALUE)
        );
        shapeFieldLayout.setVerticalGroup(
            shapeFieldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 187, Short.MAX_VALUE)
        );

        getContentPane().add(shapeField, java.awt.BorderLayout.CENTER);

        FileTopMenu.setText("File");
        MenuContainer.add(FileTopMenu);

        setJMenuBar(MenuContainer);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_OpenPictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_OpenPictureActionPerformed
        OpenFile openFile = new OpenFile();
        openFile.open();
        try {
            background = ImageIO.read(openFile.openedFile);
        } catch (IOException e) {
            Logger.getLogger(shapeField.getClass().getName()).log(Level.SEVERE,null, e);
        }
        repaint();
    }//GEN-LAST:event_button_OpenPictureActionPerformed

    private void button_SavePictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_SavePictureActionPerformed
        SaveFile saveFile = new SaveFile();
        saveFile.save(background);
    }//GEN-LAST:event_button_SavePictureActionPerformed

    private void button_PrintPictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_PrintPictureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_button_PrintPictureActionPerformed

    private void button_DrawFreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_DrawFreeActionPerformed
        shapeObject = new drawing_FREE();

        System.out.println("drawing_FREE");
        System.out.println("shapeObject" + shapeObject);
    }//GEN-LAST:event_button_DrawFreeActionPerformed

    private void button_ClearScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_ClearScreenActionPerformed
        background = createImage(shapeField.getWidth(), shapeField.getHeight());
        repaint();
    }//GEN-LAST:event_button_ClearScreenActionPerformed

    private void button_DrawLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_DrawLineActionPerformed
        shapeObject = new drawing_LINE();

        System.out.println("drawing_LINE");
        System.out.println("shapeObject" + shapeObject);
    }//GEN-LAST:event_button_DrawLineActionPerformed

    private void button_DrawOvalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_DrawOvalActionPerformed
        shapeObject = new drawing_OVAL();
        System.out.println("drawing_OVAL");
        System.out.println("shapeObject" + shapeObject);
    }//GEN-LAST:event_button_DrawOvalActionPerformed

    private void button_DrawRectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_DrawRectActionPerformed
        shapeObject = new drawing_RECT();

        System.out.println("drawing_RECT");
        System.out.println("shapeObject" + shapeObject);
    }//GEN-LAST:event_button_DrawRectActionPerformed

    private void redSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_redSliderStateChanged
        shape_preview();
    }//GEN-LAST:event_redSliderStateChanged

    private void greenSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_greenSliderStateChanged
        shape_preview();
    }//GEN-LAST:event_greenSliderStateChanged

    private void blueSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_blueSliderStateChanged
        shape_preview();
    }//GEN-LAST:event_blueSliderStateChanged

    private void strokeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_strokeSliderStateChanged
        shape_preview();
    }//GEN-LAST:event_strokeSliderStateChanged

    private void shapeFieldMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shapeFieldMousePressed
        pastX = evt.getX();
        pastY = evt.getY();
        if (background == null) {
            background = createImage(shapeField.getWidth(), shapeField.getHeight());
            forground = createImage(shapeField.getWidth(), shapeField.getHeight());
        }
        System.out.println(evt);
        System.out.println(shapeObject);
    }//GEN-LAST:event_shapeFieldMousePressed

    private void shapeFieldMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shapeFieldMouseReleased
        backgroundBase = background.getGraphics();
        forgroundBase = forground.getGraphics();
        forgroundBase.setColor(return_shapeColor());

        if (IS_shapeText.isSelected()) {
            forgroundBase.drawString(IS_shapeText.getText(), evt.getX(), evt.getY());
        }

        backgroundBase.drawImage(forground, 0, 0, null);
        //repaint();
    }//GEN-LAST:event_shapeFieldMouseReleased

    private void shapeFieldMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shapeFieldMouseDragged
        int w = Math.abs(evt.getX() - pastX);
        int h = Math.abs(evt.getY() - pastY);
        int x;
        if (pastX < evt.getX()) {
            x = pastX;
        } else {
            x = evt.getX();
        }
        int y;
        if (pastY < evt.getY()) {
            y = pastY;
        } else {
            y = evt.getY();
        }
        if (((shapeObject instanceof drawing_LINE)) || ((shapeObject instanceof drawing_FREE))) {
            x = pastX;
            y = pastY;
            w = evt.getX();
            h = evt.getY();
        }
        
        System.out.println(evt);
        System.out.println(shapeObject);
        
        forgroundBase = forground.getGraphics();
        forgroundBase.drawImage(background, 0, 0, null);

        shapeObject.drawShape(forgroundBase, 
                x, y, w, h, 
                return_shapeColor(), 
                return_shapeStroke(), 
                return_shapeFilled(), 
                return_shapeAlpha(), 
                return_shapeGradient(x,y,w,h), 
                return_shapeTexture());

        shapeField.getGraphics().drawImage(forground, 0, 0, null);
        if ((shapeObject instanceof drawing_FREE)) {
            pastX = w;
            pastY = h;
            backgroundBase = background.getGraphics();
            backgroundBase.drawImage(forground, 0, 0, null);
        }
    }//GEN-LAST:event_shapeFieldMouseDragged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaintGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaintGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaintGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaintGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaintGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu FileTopMenu;
    private javax.swing.JCheckBox IS_shapeDashed;
    private javax.swing.JCheckBox IS_shapeFilled;
    private javax.swing.JCheckBox IS_shapeGradient;
    public javax.swing.JCheckBox IS_shapeText;
    private javax.swing.JCheckBox IS_shapeTexture;
    private javax.swing.JMenuBar MenuContainer;
    private javax.swing.JToolBar PictureControl;
    private javax.swing.JPanel ShapeControl;
    private javax.swing.JSlider alphaSlider;
    private javax.swing.JSlider blueSlider;
    private Test.Button_ClearScreen button_ClearScreen;
    private Test.Button_DrawFree button_DrawFree;
    private Test.Button_DrawLine button_DrawLine;
    private Test.Button_DrawOval button_DrawOval;
    private Test.Button_DrawRect button_DrawRect;
    private Test.Button_OpenPicture button_OpenPicture;
    private Test.Button_PrintPicture button_PrintPicture;
    private Test.Button_SavePicture button_SavePicture;
    private javax.swing.JTextField customText;
    private javax.swing.ButtonGroup dashORfilled;
    private javax.swing.JSlider greenSlider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JSlider redSlider;
    private javax.swing.JPanel shapeField;
    private javax.swing.JPanel shapePreview;
    private javax.swing.JSlider strokeSlider;
    private javax.swing.ButtonGroup textureORgradient;
    // End of variables declaration//GEN-END:variables

    private void update_color() {
        shapeColor = new Color(redSlider.getValue(), greenSlider.getValue(), blueSlider.getValue());
    }
    
    private BasicStroke return_shapeStroke(){
     float[] fa = { 10.0F, 10.0F, 10.0F };
     if (IS_shapeDashed.isSelected()) {
       return new BasicStroke(strokeSlider.getValue(), 0, 2, 10.0F, fa, 10.0F);
     }
        shapeStroke = new BasicStroke(strokeSlider.getValue());
        return shapeStroke;
    }
    
    private boolean return_shapeFilled(){
        shapeFilled = IS_shapeFilled.isSelected();
        return shapeFilled;
    }
    
    private float return_shapeAlpha(){
        shapeAlpha = alphaSlider.getValue();
        return shapeAlpha;
    }
    
    private GradientPaint return_shapeGradient(int x, int y, int w, int h){
        if(IS_shapeGradient.isSelected()){
        shapeGradient = new GradientPaint((float) x, (float)y, Color.BLACK, (float)w, (float)h, Color.WHITE);
        }else{
            shapeGradient = null;
        }
        return shapeGradient;
    }
    
    private TexturePaint return_shapeTexture(){
        return shapeTexture;
    }

    private void shape_preview() {
        Graphics shapeDisplay = shapePreview.getGraphics();
        Graphics2D flatGraphics = (Graphics2D) shapeDisplay;
       // AlphaComposite alphaTemp = AlphaComposite.getInstance(3, shapeAlpha);
        flatGraphics.clearRect(0, 0, shapePreview.getWidth(), shapePreview.getHeight());
        update_color();
        update_stroke();
        //update_alpha();
        flatGraphics.setStroke(shapeStroke);
        flatGraphics.setColor(shapeColor);
        //flatGraphics.setComposite(alphaTemp);
        flatGraphics.drawLine(shapePreview.getWidth() / 2, 0, shapePreview.getWidth() / 2, shapePreview.getHeight());
    }

    private void update_stroke() {
        shapeStroke = new BasicStroke(strokeSlider.getValue());
    }

    private void update_alpha() {
        shapeAlpha = alphaSlider.getValue();
    }

    private Color return_shapeColor() {
        return new Color(redSlider.getValue(), greenSlider.getValue(), blueSlider.getValue());
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        shape_preview();
        shapeField.getGraphics().drawImage(background, 0, 0, null);
    }

}
