package v1;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * *v1**
 * *FinalProject**Â 
 * *ThomasR**
 * *11142013:1841**
 */
public class ApplicationCore {
  private JPanel panel1;
  private JPanel shapeControls;
  private JPanel shapeField;
  private v1.Button_SavePicture Button_SavePicture;
  private v1.Button_OpenPicture Button_OpenPicture;
  private Button_ClearScreen Button_ClearPicture;
  private v1.Button_DrawFree Button_DrawFree;
  private v1.Button_DrawLine Button_DrawLine;
  private v1.Button_DrawOval Button_DrawOval;
  private v1.Button_DrawRect Button_DrawRect;
  private JRadioButton textureRadioButton;
  private JRadioButton filledRadioButton;
  private JSlider redSlider;
  private JSlider greenSlider;
  private JSlider blueSlider;
  private JSlider alphaSlider;
  private JPanel colorVomit;

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  public ApplicationCore() {
    Button_SavePicture.addActionListener(new ActionListener() {
      /**
       * Invoked when an action occurs.
       */
      @Override
      public void actionPerformed(ActionEvent e) {
        //To change body of implemented methods use File | Settings | File Templates.
      }
    });
    Button_OpenPicture.addActionListener(new ActionListener() {
      /**
       * Invoked when an action occurs.
       */
      @Override
      public void actionPerformed(ActionEvent e) {
        //To change body of implemented methods use File | Settings | File Templates.
      }
    });
    Button_ClearPicture.addActionListener(new ActionListener() {
      /**
       * Invoked when an action occurs.
       */
      @Override
      public void actionPerformed(ActionEvent e) {
        //To change body of implemented methods use File | Settings | File Templates.
      }
    });
    Button_DrawFree.addActionListener(new ActionListener() {
      /**
       * Invoked when an action occurs.
       */
      @Override
      public void actionPerformed(ActionEvent e) {
        //To change body of implemented methods use File | Settings | File Templates.
      }
    });
    Button_DrawLine.addActionListener(new ActionListener() {
      /**
       * Invoked when an action occurs.
       */
      @Override
      public void actionPerformed(ActionEvent e) {
        //To change body of implemented methods use File | Settings | File Templates.
      }
    });
    Button_DrawOval.addActionListener(new ActionListener() {
      /**
       * Invoked when an action occurs.
       */
      @Override
      public void actionPerformed(ActionEvent e) {
        //To change body of implemented methods use File | Settings | File Templates.
      }
    });
    Button_DrawRect.addActionListener(new ActionListener() {
      /**
       * Invoked when an action occurs.
       */
      @Override
      public void actionPerformed(ActionEvent e) {
        //To change body of implemented methods use File | Settings | File Templates.
      }
    });
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    panel1 = new JPanel();
    panel1.setLayout(new BorderLayout(0, 0));
    final JToolBar toolBar1 = new JToolBar();
    toolBar1.setPreferredSize(new Dimension(84, 64));
    panel1.add(toolBar1, BorderLayout.NORTH);
    Button_SavePicture = new v1.Button_SavePicture();
    Button_SavePicture.setIcon(new ImageIcon(getClass().getResource("/v1/assets/save.png")));
    Button_SavePicture.setMaximumSize(new Dimension(64, 64));
    Button_SavePicture.setMinimumSize(new Dimension(32, 32));
    Button_SavePicture.setPreferredSize(new Dimension(64, 64));
    toolBar1.add(Button_SavePicture);
    Button_OpenPicture = new v1.Button_OpenPicture();
    Button_OpenPicture.setIcon(new ImageIcon(getClass().getResource("/v1/assets/open.png")));
    Button_OpenPicture.setMaximumSize(new Dimension(64, 64));
    Button_OpenPicture.setMinimumSize(new Dimension(32, 32));
    Button_OpenPicture.setPreferredSize(new Dimension(64, 64));
    toolBar1.add(Button_OpenPicture);
    Button_ClearPicture = new Button_ClearScreen();
    Button_ClearPicture.setIcon(new ImageIcon(getClass().getResource("/v1/assets/clear.png")));
    Button_ClearPicture.setMaximumSize(new Dimension(64, 64));
    Button_ClearPicture.setMinimumSize(new Dimension(32, 32));
    Button_ClearPicture.setPreferredSize(new Dimension(64, 64));
    toolBar1.add(Button_ClearPicture);
    final JSeparator separator1 = new JSeparator();
    toolBar1.add(separator1);
    Button_DrawFree = new v1.Button_DrawFree();
    Button_DrawFree.setIcon(new ImageIcon(getClass().getResource("/v1/assets/freedraw.png")));
    Button_DrawFree.setMaximumSize(new Dimension(64, 64));
    Button_DrawFree.setMinimumSize(new Dimension(32, 32));
    Button_DrawFree.setPreferredSize(new Dimension(64, 64));
    toolBar1.add(Button_DrawFree);
    Button_DrawLine = new v1.Button_DrawLine();
    Button_DrawLine.setMaximumSize(new Dimension(64, 64));
    Button_DrawLine.setMinimumSize(new Dimension(32, 32));
    Button_DrawLine.setPreferredSize(new Dimension(64, 64));
    toolBar1.add(Button_DrawLine);
    Button_DrawOval = new v1.Button_DrawOval();
    Button_DrawOval.setMaximumSize(new Dimension(64, 64));
    Button_DrawOval.setMinimumSize(new Dimension(32, 32));
    Button_DrawOval.setPreferredSize(new Dimension(64, 64));
    toolBar1.add(Button_DrawOval);
    Button_DrawRect = new v1.Button_DrawRect();
    Button_DrawRect.setMaximumSize(new Dimension(64, 64));
    Button_DrawRect.setMinimumSize(new Dimension(32, 32));
    Button_DrawRect.setPreferredSize(new Dimension(64, 64));
    toolBar1.add(Button_DrawRect);
    shapeControls = new JPanel();
    shapeControls.setLayout(new GridBagLayout());
    panel1.add(shapeControls, BorderLayout.SOUTH);
    colorVomit = new JPanel();
    colorVomit.setLayout(new BorderLayout(0, 0));
    colorVomit.setPreferredSize(new Dimension(50, 50));
    GridBagConstraints gbc;
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.anchor = GridBagConstraints.WEST;
    shapeControls.add(colorVomit, gbc);
    textureRadioButton = new JRadioButton();
    textureRadioButton.setText("Texture");
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.anchor = GridBagConstraints.WEST;
    shapeControls.add(textureRadioButton, gbc);
    filledRadioButton = new JRadioButton();
    filledRadioButton.setText("Filled");
    gbc = new GridBagConstraints();
    gbc.gridx = 2;
    gbc.gridy = 0;
    gbc.anchor = GridBagConstraints.WEST;
    shapeControls.add(filledRadioButton, gbc);
    redSlider = new JSlider();
    redSlider.setMajorTickSpacing(50);
    redSlider.setMaximum(255);
    redSlider.setMinorTickSpacing(10);
    redSlider.setPaintLabels(true);
    redSlider.setPaintTicks(true);
    redSlider.setSnapToTicks(true);
    redSlider.setValue(0);
    gbc = new GridBagConstraints();
    gbc.gridx = 3;
    gbc.gridy = 0;
    gbc.anchor = GridBagConstraints.WEST;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    shapeControls.add(redSlider, gbc);
    greenSlider = new JSlider();
    greenSlider.setMajorTickSpacing(50);
    greenSlider.setMaximum(255);
    greenSlider.setMinorTickSpacing(10);
    greenSlider.setPaintLabels(true);
    greenSlider.setPaintTicks(true);
    greenSlider.setSnapToTicks(true);
    greenSlider.setValue(0);
    gbc = new GridBagConstraints();
    gbc.gridx = 4;
    gbc.gridy = 0;
    gbc.anchor = GridBagConstraints.WEST;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    shapeControls.add(greenSlider, gbc);
    blueSlider = new JSlider();
    blueSlider.setMajorTickSpacing(50);
    blueSlider.setMaximum(255);
    blueSlider.setMinorTickSpacing(10);
    blueSlider.setPaintLabels(true);
    blueSlider.setPaintTicks(true);
    blueSlider.setSnapToTicks(true);
    blueSlider.setValue(0);
    gbc = new GridBagConstraints();
    gbc.gridx = 5;
    gbc.gridy = 0;
    gbc.anchor = GridBagConstraints.WEST;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    shapeControls.add(blueSlider, gbc);
    alphaSlider = new JSlider();
    alphaSlider.setMajorTickSpacing(25);
    alphaSlider.setMinorTickSpacing(5);
    alphaSlider.setPaintLabels(true);
    alphaSlider.setPaintTicks(true);
    alphaSlider.setSnapToTicks(true);
    alphaSlider.setValue(0);
    gbc = new GridBagConstraints();
    gbc.gridx = 6;
    gbc.gridy = 0;
    gbc.anchor = GridBagConstraints.WEST;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    shapeControls.add(alphaSlider, gbc);
    shapeField = new JPanel();
    shapeField.setLayout(new BorderLayout(0, 0));
    panel1.add(shapeField, BorderLayout.CENTER);
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return panel1;
  }
}
